package AccountPattern.APP;

/*Generated by MPS */

import org.modellwerkstatt.objectflow.ObjectFlowRT.IOFXEntity;
import org.modellwerkstatt.objectflow.ObjectFlowRT.OFXInteger;
import org.modellwerkstatt.objectflow.ObjectFlowRT.OFXString;
import org.modellwerkstatt.objectflow.ObjectFlowRT.OFXList;
import org.modellwerkstatt.objectflow.ObjectFlowRT.OFXBigDecimalVP;
import java.math.BigDecimal;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.modellwerkstatt.objectflow.ObjectFlowRT.IOFXRevertableObject;
import java.util.List;

public class Acc_StockKeepingUnit implements IOFXEntity<Integer> {
  public static final int entitySessionUID = Acc_StockKeepingUnit.class.hashCode();
  protected boolean _dirty = true;
  protected boolean _readOnly = false;
  protected int _TCN = 0;

  public void setDirty(boolean value) {
    this._dirty = value;
  }

  public boolean getDirty() {
    return this._dirty;
  }

  public void setReadOnly(boolean value) {
    this._readOnly = value;
  }

  public boolean getReadOnly() {
    return this._readOnly;
  }

  public void clearDirtySetReadonly(boolean readOnly) {
    this._readOnly = readOnly;
    this._dirty = false;
  }

  public void setTCN(int value) {
    this._TCN = value;
  }

  public int getTCN() {
    return this._TCN;
  }

  public Integer getKey() {
    return this.id.getValue();
  }

  public int getSessionObjectKeyStoreID() {
    return entitySessionUID;
  }


  protected boolean _enabled = true;

  public void setEnabled(boolean value) {
    this._enabled = value;
  }

  public boolean getEnabled() {
    return this._enabled;
  }

  public Acc_StockKeepingUnit _META() {
    return this;
  }



  protected OFXInteger id = new OFXInteger();
  protected OFXString filiale = new OFXString();
  protected OFXString artikel = new OFXString();
  protected OFXList<Acc_StockEntry> entries = new OFXList<Acc_StockEntry>();
  protected OFXBigDecimalVP balance = new OFXBigDecimalVP();


  public Acc_StockKeepingUnit() {
  }

  public BigDecimal updateBalance() {
    BigDecimal x = new BigDecimal(0.0);
    for (Acc_StockEntry entry : ListSequence.fromList(getEntries())) {
      x.add(entry.getQuantity().getAmount());
    }
    return x;
  }

  public void addEntryIfNotExists(Acc_StockEntry entry) {
    if (ListSequence.fromList(getEntries()).contains(entry)) {
      /*
        System.out.println("entry already exists");
      */
      return;
    }
    ListSequence.fromList(getEntries()).addElement(entry);
  }

  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("Filiale: " + getFiliale() + " ==>" + "Artikel: " + getArtikel());
    for (Acc_StockEntry en : ListSequence.fromList(getEntries())) {
      sb.append(en.getProduct().getArtikelnr() + "\n");
    }
    return sb.toString();
  }




  public OFXInteger getId_META() {
    return this.id;
  }

  public OFXString getFiliale_META() {
    return this.filiale;
  }

  public OFXString getArtikel_META() {
    return this.artikel;
  }

  public OFXList getEntries_META() {
    return this.entries;
  }

  public OFXBigDecimalVP getBalance_META() {
    return this.balance;
  }




  public void load(IOFXRevertableObject param) {
    Acc_StockKeepingUnit entity = ((Acc_StockKeepingUnit) param);
    this.id.load(entity.id);
    this.filiale.load(entity.filiale);
    this.artikel.load(entity.artikel);
    this.entries.load(entity.entries);
    this._dirty = entity._dirty;
    this._enabled = entity._enabled;
    this._TCN = entity._TCN;
    this._readOnly = entity._readOnly;
  }

  public IOFXRevertableObject copy() {
    Acc_StockKeepingUnit entity = new Acc_StockKeepingUnit();
    entity.id = this.id.copy();
    entity.filiale = this.filiale.copy();
    entity.artikel = this.artikel.copy();
    entity.entries = this.entries.copy();
    entity._dirty = this._dirty;
    entity._enabled = this._enabled;
    entity._TCN = this._TCN;
    entity._readOnly = this._readOnly;
    return entity;
  }



  public int getId() {
    return id.getValue();
  }

  public void setId(int value) {
    if ((_dirty |= id.setValue(value)) && this._readOnly) {
      throw new IllegalAccessError("Changing values in read only entity is not allowed.");
    }
  }

  public String getFiliale() {
    return filiale.getValue();
  }

  public void setFiliale(String value) {
    if ((_dirty |= filiale.setValue(value)) && this._readOnly) {
      throw new IllegalAccessError("Changing values in read only entity is not allowed.");
    }
  }

  public String getArtikel() {
    return artikel.getValue();
  }

  public void setArtikel(String value) {
    if ((_dirty |= artikel.setValue(value)) && this._readOnly) {
      throw new IllegalAccessError("Changing values in read only entity is not allowed.");
    }
  }

  public List<Acc_StockEntry> getEntries() {
    return entries.getValue();
  }

  public void setEntries(List<Acc_StockEntry> value) {
    if ((_dirty |= entries.setValue(value)) && this._readOnly) {
      throw new IllegalAccessError("Changing values in read only entity is not allowed.");
    }
  }

  public BigDecimal getBalance() {
    // mowa util 
    BigDecimal x = new BigDecimal(0.0);
    for (Acc_StockEntry entry : ListSequence.fromList(getEntries())) {
      x.add(entry.getQuantity().getAmount());
    }
    return x;

  }

  public void setBalance(BigDecimal value) {
  }
}
