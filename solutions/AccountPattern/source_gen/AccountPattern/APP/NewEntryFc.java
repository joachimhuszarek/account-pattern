package AccountPattern.APP;

/*Generated by MPS */

import org.modellwerkstatt.forms.FormCrtl.IGen_FormCrtl;
import org.modellwerkstatt.forms.FormCrtl.IFSelectionController;
import org.modellwerkstatt.forms.FormCrtl.IToolkit_FormContainer;
import java.util.List;
import org.modellwerkstatt.forms.FormCrtl.FCommandTrigger;
import org.modellwerkstatt.objectflow.ObjectFlowRT.IOFXSelection;
import org.modellwerkstatt.forms.api.IHotKeyConfig;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.modellwerkstatt.forms.FormCrtl.FCommandContainer;
import org.modellwerkstatt.forms.FormCrtl.IToolkit_UiFactory;
import java.util.ArrayList;
import org.modellwerkstatt.forms.FormCrtl.IToolkit_Form;

public class NewEntryFc implements IGen_FormCrtl<Acc_StockEntry> {
  private IGen_FormCrtl childform_a;


  private IFSelectionController selectionController;
  private IToolkit_FormContainer uiFormContainer;
  private List<FCommandTrigger> triggers;



  public NewEntryFc() {
  }

  public boolean saveAndValidate() {
    return true;
  }

  public boolean hasSpaceForHeading() {
    return false;
  }

  public IGen_FormCrtl.Type getType() {
    return IGen_FormCrtl.Type.FormContainer;
  }

  public void setHeadingText(String text) {
    // This is the controller, so take it serious 
    // do not access ui directly 
    uiFormContainer.setTitleText(text);
  }

  public void setFlagText(String text) {
    // This is the controller, so take it serious 
    // do not access ui directly 
    uiFormContainer.setFlagText(text);
  }

  public IFSelectionController getSelectionController() {
    return selectionController;
  }

  public void setSelectionController(IFSelectionController bvc) {
    selectionController = bvc;
  }

  public void pushSelection(IOFXSelection selection) {
    selectionController.pushSelectionAbsolute(selection);
  }

  public IOFXSelection getSelection(Class clazz) {
    return selectionController.getSelectionAbsolute(clazz);
  }

  public void setReadOnly(boolean ro) {
  }

  public Class getElementClass() {
    return Acc_StockEntry.class;
  }

  @Deprecated
  public void flag(String message) {
    throw new RuntimeException("not implemented - deprecated with moware bond.");
  }

  @Deprecated
  public List<IHotKeyConfig> getHotKeysToRegister() {
    // uiFormContainer.getHotKeysToRegister() ???  
    // no! triggers are here !! 
    return null;
  }

  public void loadList(List<Acc_StockEntry> objects, IOFXSelection selection) {
    // nothing right now 
  }

  public String getName() {
    return "AccountPattern.APP.NewEntryFc";
  }

  public void reevalTriggers() {
    ListSequence.fromList(triggers).visitAll(new IVisitor<FCommandTrigger>() {
      public void visit(FCommandTrigger it) {
        it.reevalEnabled(selectionController);
      }
    });
  }

  public boolean selectionChanged(IOFXSelection selection) {
    return true;
  }

  public void registerBinding(IFSelectionController rootCrtl, Class selectedObject, String propertyName, IGen_FormCrtl parentView, FCommandContainer cmdContainer) {
    IToolkit_UiFactory factory = cmdContainer.getUiFactory();

    // obviously, generated artifact is instaniated, also instantiate UI element 
    uiFormContainer = factory.createToolkitFormContainer();

    // instantiate generated children artifacts  
    childform_a = factory.createGeneratedFormByFqName("AccountPattern.APP.NewEntryDf");

    // regist within selection controller, also initializes ui ..  
    if (selectedObject != null) {
      // register myself for action enable/disable updates 
      rootCrtl.registerView(selectedObject, Acc_StockEntry.class, propertyName, this, parentView);

      // dynamically bound 
      // first: rigister those who are dynamically bound dynamically 

      // then: register those who are statically bound statically 
      childform_a.registerBinding(rootCrtl, null, null, this, cmdContainer);

    } else {
      throw new IllegalStateException("NewEntryFc" + " is dynamically bound - selectionObject is not allowed to be null.");
    }

    // register includes ... load with given..  

    // register includes ... load with not given ..  



    // layout components .. set layout and register within parent...  
    uiFormContainer.setLayoutConstraints(ListSequence.fromListAndArray(new ArrayList<String>(), "1*"), ListSequence.fromListAndArray(new ArrayList<String>(), "1*"));

    uiFormContainer.addChildren(childform_a.getToolkitImplementation());


    // finally initialize menu ...  



    // Then set the title, could depend on past config 

  }

  public IToolkit_Form getToolkitImplementation() {
    return uiFormContainer;
  }

  public void gcClear() {
    uiFormContainer.gcClear();

  }
}
