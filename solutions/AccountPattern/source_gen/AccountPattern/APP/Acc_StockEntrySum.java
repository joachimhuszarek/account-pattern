package AccountPattern.APP;

/*Generated by MPS */

import org.modellwerkstatt.objectflow.ObjectFlowRT.IOFXEntity;
import org.modellwerkstatt.objectflow.ObjectFlowRT.OFXInteger;
import org.modellwerkstatt.objectflow.ObjectFlowRT.OFXList;
import org.modellwerkstatt.objectflow.ObjectFlowRT.OFXBigDecimalVP;
import org.modellwerkstatt.objectflow.ObjectFlowRT.IOFXRevertableObject;
import java.util.List;
import java.math.BigDecimal;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class Acc_StockEntrySum implements IOFXEntity<Integer> {
  public static final int entitySessionUID = Acc_StockEntrySum.class.hashCode();
  protected boolean _dirty = true;
  protected boolean _readOnly = false;
  protected int _TCN = 0;

  public void setDirty(boolean value) {
    this._dirty = value;
  }

  public boolean getDirty() {
    return this._dirty;
  }

  public void setReadOnly(boolean value) {
    this._readOnly = value;
  }

  public boolean getReadOnly() {
    return this._readOnly;
  }

  public void clearDirtySetReadonly(boolean readOnly) {
    this._readOnly = readOnly;
    this._dirty = false;
  }

  public void setTCN(int value) {
    this._TCN = value;
  }

  public int getTCN() {
    return this._TCN;
  }

  public Integer getKey() {
    return this.id.getValue();
  }

  public int getSessionObjectKeyStoreID() {
    return entitySessionUID;
  }


  protected boolean _enabled = true;

  public void setEnabled(boolean value) {
    this._enabled = value;
  }

  public boolean getEnabled() {
    return this._enabled;
  }

  public Acc_StockEntrySum _META() {
    return this;
  }



  protected OFXInteger id = new OFXInteger();
  protected OFXList<Acc_StockEntry> stockEntries = new OFXList<Acc_StockEntry>();
  protected OFXBigDecimalVP summe = new OFXBigDecimalVP();


  public Acc_StockEntrySum() {
  }




  public OFXInteger getId_META() {
    return this.id;
  }

  public OFXList getStockEntries_META() {
    return this.stockEntries;
  }

  public OFXBigDecimalVP getSumme_META() {
    return this.summe;
  }




  public void load(IOFXRevertableObject param) {
    Acc_StockEntrySum entity = ((Acc_StockEntrySum) param);
    this.id.load(entity.id);
    this.stockEntries.load(entity.stockEntries);
    this._dirty = entity._dirty;
    this._enabled = entity._enabled;
    this._TCN = entity._TCN;
    this._readOnly = entity._readOnly;
  }

  public IOFXRevertableObject copy() {
    Acc_StockEntrySum entity = new Acc_StockEntrySum();
    entity.id = this.id.copy();
    entity.stockEntries = this.stockEntries.copy();
    entity._dirty = this._dirty;
    entity._enabled = this._enabled;
    entity._TCN = this._TCN;
    entity._readOnly = this._readOnly;
    return entity;
  }



  public int getId() {
    return id.getValue();
  }

  public void setId(int value) {
    if ((_dirty |= id.setValue(value)) && this._readOnly) {
      throw new IllegalAccessError("Changing values in read only entity is not allowed.");
    }
  }

  public List<Acc_StockEntry> getStockEntries() {
    return stockEntries.getValue();
  }

  public void setStockEntries(List<Acc_StockEntry> value) {
    if ((_dirty |= stockEntries.setValue(value)) && this._readOnly) {
      throw new IllegalAccessError("Changing values in read only entity is not allowed.");
    }
  }

  public BigDecimal getSumme() {
    BigDecimal result = new BigDecimal(0.0);
    for (Acc_StockEntry entry : ListSequence.fromList(getStockEntries())) {
      result.add(entry.getQuantity().getAmount());
    }
    return result;
  }

  public void setSumme(BigDecimal value) {
  }
}
