package AccountPattern.APP;

/*Generated by MPS */

import org.modellwerkstatt.objectflow.ObjectFlowRT.IOFXCommand;
import org.modellwerkstatt.objectflow.ObjectFlowRT.IOFXProcess;
import org.modellwerkstatt.objectflow.ObjectFlowRT.IOFXPage;
import org.modellwerkstatt.objectflow.ObjectFlowRT.IOFXSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.modellwerkstatt.objectflow.ObjectFlowRT.IOFXApplicationFactory;
import org.modellwerkstatt.forms.FormsRT.HafinaDefaults;
import org.modellwerkstatt.objectflow.ObjectFlowRT.IOFXConclusion;
import org.modellwerkstatt.objectflow.ObjectFlowRT.OFXCommandCancelException;
import org.modellwerkstatt.objectflow.ObjectFlowRT.OFXCommandDoneException;
import org.modellwerkstatt.objectflow.ObjectFlowRT.OFXChangePageException;
import org.modellwerkstatt.objectflow.ObjectFlowRT.OFXPageFlagException;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.math.BigDecimal;
import org.modellwerkstatt.objectflow.ObjectFlowRT.OFXConclusionInformation;
import org.modellwerkstatt.objectflow.ObjectFlowRT.IOFXView;

public class Create_new_entry implements IOFXCommand<Acc_StockEntry> {

  private IOFXProcess<Acc_StockEntry> process;
  private IOFXPage<?> currentPage;
  private Acc_StockEntry entry;

  private IOFXPage<Acc_StockEntry> Standard;

  private boolean terminatedCancel = false;
  private boolean terminatedOk = false;
  private boolean terminatedException = false;

  private StringBuilder lockHolders;

  private int currentPageIndex;

  private Acc_StockKeepingUnit sku;
  private Acc_StockEntry oppEntry;
  private IOFXSession __manMapSession;
  @Autowired
  private IOFXApplicationFactory appFactory;






  public Create_new_entry() {
    // moware35, rc30 initialize list, since no exception is thrown by mps collection lang 
    Standard = new Create_new_entry.Page_Standard();
    lockHolders = new StringBuilder();


    currentPage = Standard;
    currentPageIndex = 0;
  }



  public void setCommandParams(IOFXProcess proc, IOFXSession session, Acc_StockEntry processDocument, Object[] args) {
    this.process = proc;
    this.__manMapSession = session;
    this.entry = processDocument;

  }




  public String getCommandFqName() {
    return "AccountPattern.APP.Create_new_entry";
  }

  @Override
  public String toString() {
    return "Command " + this.getCommandFqName() + " (type: " + "GRAPH_OWNER_CMD" + ") with current proc doc\n" + entry;
  }

  public String getCommandIcon() {
    return HafinaDefaults.ICON_NEW;
  }

  public IOFXSession getCommandSession() {
    return __manMapSession;
  }

  public void doConclusion(IOFXConclusion conclusion) throws Exception {
    if (terminatedCancel || terminatedOk || terminatedException) {
      throw new IllegalStateException("AccountPattern.APP.Create_new_entry" + " already terminated, conclusion no longer available.");
    }

    try {
      currentPage.concludePage(conclusion);

    } catch (OFXCommandCancelException cancelEx) {
      this.doFinalCancelConclusion();
      if (!(cancelEx.getMessage().equals(""))) {
        throw cancelEx;
      }

    } catch (OFXCommandDoneException doneEx) {
      this.doFinalOkConclusion();

    } catch (OFXChangePageException pageEx) {
      //  command not finished .. no process engine check, just proceed ..  
      if (Standard.getPageName().equals(pageEx.getMessage())) {
        currentPage = Standard;
        currentPageIndex = 0;
      }
      throw pageEx;

    } catch (OFXPageFlagException pageFlagEx) {
      throw pageFlagEx;

    } catch (Exception ex) {
      this.doFinalExceptionConclusion(ex);
      throw ex;
    }

    // can throw, cancelException, pageException, exception 
  }

  public String getCommandHelp() {
    StringBuilder builder = new StringBuilder();
    return builder.toString();
  }

  public String getCommandTitleShort() {
    StringBuilder sb = new StringBuilder();
    sb.append("Create new entry ");
    return sb.toString();
  }

  public String getCommandTitleAddOn() {
    return "";
  }

  public List<String> getPageTitles() {
    List<String> views = ListSequence.fromList(new ArrayList<String>());
    ListSequence.fromList(views).addElement(Standard.getPageName());
    return views;
  }

  public int getCurrentPageIndex() {
    return this.currentPageIndex;
  }

  public void externalAbortNow() throws Exception {
    doFinalCancelConclusion();
  }

  public void initCommand() throws Exception {
    // check locks before running initCommand in CommandContainer 

    if (terminatedCancel || terminatedOk || terminatedException) {
      throw new IllegalStateException("AccountPattern.APP.Create_new_entry" + " already terminated, startCommand() no longer available.");
    }

    // initShadow() of arguments given ...  
    startShadowing();

    try {
      sku = new Acc_StockKeepingUnit();

      entry = new Acc_StockEntry();
      entry.setProduct(new Acc_Product());
      entry.setQuantity(new _FunctionTypes._return_P0_E0<Quantity>() {
        public Quantity invoke() {
          Quantity tmp = new Quantity();
          tmp.setAmount(new BigDecimal(2.0));
          tmp.setUnit("Stk.");
          return tmp;
        }
      }.invoke());

      oppEntry = new _FunctionTypes._return_P0_E0<Acc_StockEntry>() {
        public Acc_StockEntry invoke() {
          Acc_StockEntry tmp = new Acc_StockEntry();
          tmp.setStockEntrySum(null);
          tmp.setQuantity(new _FunctionTypes._return_P0_E0<Quantity>() {
            public Quantity invoke() {
              Quantity tmp = new Quantity();
              tmp.setAmount(entry.getQuantity().getAmount().negate());
              tmp.setUnit(entry.getQuantity().getUnit());
              return tmp;
            }
          }.invoke());
          tmp.setStatus(entry.getStatus());
          tmp.setDatum(entry.getDatum());
          tmp.setFiliale(entry.getFiliale());
          tmp.setProduct(entry.getProduct());
          tmp.setKontoVon(entry.getKontoNach());
          tmp.setKontoNach(entry.getKontoVon());
          return tmp;
        }
      }.invoke();

      // no page? just run Ok Conclusion ? 

    } catch (OFXCommandCancelException ex) {

      this.doFinalCancelConclusion();
      if (!(ex.getMessage().equals(""))) {
        throw ex;
      }

    } catch (Exception ex) {
      this.doFinalExceptionConclusion(ex);
      throw ex;

    }
  }

  public void externalAbortDueToOutsideException(Exception exceptionHappened) {
    if (!(this.isTerminatedException())) {
      this.doFinalExceptionConclusion(exceptionHappened);
    }
  }




  public void startShadowing() {
  }



  public void revertToShadow() {
  }



  public void doFinalExceptionConclusion(Exception ex) {
    terminatedOk = false;
    terminatedCancel = false;
    // in case doFinalException is called twice (e.g. possible when page missing) 

    if (!(terminatedException)) {
      // TODO: where does this come from?  

      try {
        terminatedException = true;

        revertToShadow();

        // do final transaction things here? something went bad ...  
      } finally {
        // clean up session if cmd has it s own..  
        __manMapSession.closeSessionAndfreeGC();
      }
    }
  }



  private void doFinalCancelConclusion() throws Exception {
    try {
      // Important: Revert first, then do the final cancel!  
      revertToShadow();

      terminatedCancel = true;

    } catch (Exception ex) {
      // matters of session (appFactory) are handled in final exception 
      this.doFinalExceptionConclusion(ex);
      throw ex;
    }

    // clean up session if cmd has it s own..  
    __manMapSession.closeSessionAndfreeGC();
  }

  private void doFinalOkConclusion() throws Exception {
    try {
      // checkin transaction, sku, entries 

      // set for process to change state. ..  
      terminatedOk = true;
      // change state ? 
      process.commandEnded(entry, this);

      // commit session ?  
      __manMapSession.startTransactionAndFlush();


    } catch (Exception ex) {
      // no... not terminated ok ...  
      // matters of session (appFactory) are handled in final exception 
      this.doFinalExceptionConclusion(ex);
      throw ex;

    }
    // clean up session if cmd has it s own..  
    __manMapSession.closeSessionAndfreeGC();
  }

  public String getTerminateOkMessage() {
    return null;
  }

  public Object getTerminateOkSelections() {
    return null;
  }

  public boolean isReadOnlySession() {
    return __manMapSession.isReadOnly();
  }

  public boolean isTerminatedOk() {
    return terminatedOk && !(terminatedCancel) && !(terminatedException);
  }

  public boolean isTerminatedCancel() {
    return terminatedCancel && !(terminatedException);
  }

  public boolean isTerminatedException() {
    return terminatedException;
  }

  public void setProcess(IOFXProcess process) {
    this.process = process;
  }

  public List<OFXConclusionInformation> getCurrentPageConclusions() {
    return this.currentPage.getPageConclusions();
  }

  public String calcCurrentPageDynamicTitle() {
    return this.currentPage.calcDynamicPageTitle();
  }

  public List<?> initCurrentPage(IOFXView view) throws Exception {
    List<?> returnValue = null;
    if (terminatedCancel || terminatedOk || terminatedException) {
      throw new IllegalStateException("AccountPattern.APP.Create_new_entry" + " already terminated, initCurrentPage() no longer available.");
    }

    try {
      returnValue = this.currentPage.initPage(view);

    } catch (OFXCommandCancelException cancelEx) {
      this.doFinalCancelConclusion();
      if (!(cancelEx.getMessage().equals(""))) {
        throw cancelEx;
      }

    } catch (OFXPageFlagException ex) {
      // page flag is ok here ..  
      throw ex;

    } catch (Exception ex) {
      this.doFinalExceptionConclusion(ex);
      throw ex;

    }

    return returnValue;
  }

  public String getQuestionWhenAborting() {
    return null;
  }

  public boolean isSearchCommand() {
    return false;
  }

  public boolean needsSubWindow() {
    return false;
  }

  public boolean needsNewSession() {
    return true;
  }

  public List<String> getLockNecessaryLockNames() {
    List<String> lockNames = ListSequence.fromList(new ArrayList<String>());
    return lockNames;
  }






  public class Page_Standard implements IOFXPage<Acc_StockEntry> {
    private IOFXView<Acc_StockEntry> form;
    private IOFXConclusion _bernehmen_in_SKU = new IOFXConclusion() {
      public void execute() throws OFXCommandCancelException, OFXChangePageException, OFXCommandDoneException, OFXPageFlagException, Exception {

        // run save already checked .. 


        sku.addEntryIfNotExists(entry);
        sku.addEntryIfNotExists(oppEntry);

        sku.setFiliale(entry.getFiliale());
        sku.setArtikel(entry.getProduct().getBezeichnung());

        for (Acc_StockEntry en : ListSequence.fromList(sku.getEntries())) {
          System.out.print(en.getProduct().getArtikelnr() + "\t");
          System.out.print(en.getProduct().getBezeichnung() + "\t");
          System.out.println("von " + en.getKontoVon() + " - nach " + en.getKontoNach());

        }
        System.out.println("Balance: " + sku.updateBalance());


        // default, do what? close page ??  
      }

      public boolean needsSave() {
        return true;
      }

      public boolean needsCommitSession() {
        return false;
      }

      public String getHotkeyName() {
        return "SAVE";
      }

      public boolean isEnabled() {
        // does it contain done ?  

        return true;
      }
    };
    private IOFXConclusion Speichern___Beenden = new IOFXConclusion() {
      public void execute() throws OFXCommandCancelException, OFXChangePageException, OFXCommandDoneException, OFXPageFlagException, Exception {

        // run save already checked .. 

        throw new OFXCommandDoneException("done");

        // default, do what? close page ??  
      }

      public boolean needsSave() {
        return true;
      }

      public boolean needsCommitSession() {
        return false;
      }

      public String getHotkeyName() {
        return "NONE";
      }

      public boolean isEnabled() {
        // does it contain done ?  
        if (Create_new_entry.this.isReadOnlySession()) {
          return false;
        }

        return true;
      }
    };

    public Page_Standard() {
    }

    public void concludePage(IOFXConclusion conclusionToExecute) throws OFXChangePageException, OFXCommandCancelException, OFXCommandDoneException, OFXPageFlagException, Exception {
      // could be refactored - historically flag() was handled here..  
      conclusionToExecute.execute();
    }

    public Acc_StockEntry loaderFunction() throws Exception {
      return entry;

    }

    public List<Acc_StockEntry> initPage(IOFXView<Acc_StockEntry> view) throws Exception {

      form = view;

      List<Acc_StockEntry> listToLoad;
      listToLoad = ListSequence.fromList(new ArrayList<Acc_StockEntry>());
      ListSequence.fromList(listToLoad).addElement(loaderFunction());

      // calculate scopes ...  

      return listToLoad;
    }

    public List<OFXConclusionInformation> getPageConclusions() {
      List<OFXConclusionInformation> ciList = ListSequence.fromList(new ArrayList<OFXConclusionInformation>());

      {
        // ok, basically the conclusion is enabled .. execute it ..  

        OFXConclusionInformation ci = new OFXConclusionInformation(Create_new_entry.this, _bernehmen_in_SKU, "\u00dcbernehmen in SKU");


        ListSequence.fromList(ciList).addElement(ci);
      }
      {
        // ok, basically the conclusion is enabled .. execute it ..  

        OFXConclusionInformation ci = new OFXConclusionInformation(Create_new_entry.this, Speichern___Beenden, "Speichern & Beenden");


        ListSequence.fromList(ciList).addElement(ci);
      }

      return ciList;
    }

    public String getPageName() {
      return "Standard";
    }

    public String calcDynamicPageTitle() {
      return "";
    }
  }
}
